# -*- coding: utf-8 -*-
"""Diamond prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eVBAJ8ioB5EWPNo8GGxb16-6d2Lg6_pJ
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)


import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

"""# 1. Import necessary libraries"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns

"""# 2. Load the dataset"""

df=pd.read_csv("/kaggle/input/diamonds/diamonds.csv")

"""# 3. Basic Data Exploration

**Display DataFrame**
"""

df.head()

"""**Dataset Information**"""

df.info()

"""**Dataset Shape**"""

df.shape

"""**Statistics**"""

df.describe()

"""# 4. Data Preprocessing

**Missing Values**
"""

df.isnull().sum()

"""**Label Encoding**"""

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

categorical_columns = ['cut', 'color', 'clarity']

# Apply label encoding to each categorical column

for column in categorical_columns:
    df[column] = label_encoder.fit_transform(df[column])

"""**Define features and the target variable**"""

# Split the data into features and target

X=df.drop(['price'],axis=1)
y=df['price']

"""# 5. Data Visualization

**Correlation Heatmap**
"""

plt.figure(figsize=(20, 20))




# Create a correlation matrix
correlation_matrix = df.corr()

# Adjust font size
sns.set(font_scale=1)

# Set background style
sns.set_style("whitegrid")

# Create the heatmap without the index column
sns.heatmap(correlation_matrix, annot=True, cmap='viridis', fmt=".2f", linewidths=.5, square=True)


# Set title
plt.title("Correlation Heatmap", fontsize=18)
plt.xticks(rotation=45)


# Display the plot
plt.show()

"""# 6. Data Splitting"""

from sklearn.model_selection import train_test_split

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# 7. Model Building

**Model Selection**
"""

from sklearn.linear_model import LinearRegression

model = LinearRegression()

"""**Model Training**"""

model.fit(X_train, y_train)


# Make predictions on the test set
y_pred = model.predict(X_test)

"""# 8. Evaluation"""

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Evaluate the model

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)


print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R-squared (R2): {r2:.2f}")

"""# 9. Scatter Plot with Regression Line"""

# Create a scatterplot
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.9, edgecolors='k', s=100)

# Add a regression line
sns.regplot(x=y_test, y=y_pred, scatter=False, color='r', line_kws={"color": "r", "lw": 2})

plt.xlabel("Actual Values", fontsize=14)
plt.ylabel("Predicted Values", fontsize=14)
plt.title("Model Performance - Actual vs. Predicted Values", fontsize=16)


plt.xticks(fontsize=12)
plt.yticks(fontsize=12)


plt.show()

"""<div style="
    background-color: orange;
    color: black;
    padding: 10px;
    border-radius: 5px;
    text-align: center;
    font-size: 40px;
    font-weight: bold;">
   THANK YOU
</div>

"""